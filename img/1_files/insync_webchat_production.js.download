function insyncGetUniqueUserId (insyncMarket, insyncEnv, insyncExpiryInDays){
  let cookieName = "insyncai_chat_uuid";
  if(insyncEnv != "production")cookieName += "_" + insyncMarket + "_" + insyncEnv;
  let insyncUserId = insyncGetCookie(cookieName);
  if(typeof insyncUserId == "undefined" || insyncUserId == ""){
    insyncUserId = (Date.now() + Math.round(((Math.random()+1)*100000000)) + Date.now()).toString();
    insyncSetCookie(cookieName, insyncUserId, insyncExpiryInDays);
  }
  return insyncUserId;
}

function insyncSetCookie(cookieName, cookieValue, expiryInDays){
  const d = new Date();
  d.setTime(d.getTime() + (expiryInDays*24*60*60*1000));
  let expires = "expires="+ d.toUTCString();
  let baseDomain = window.location.hostname.split(".").slice(window.location.hostname.split(".").length-2).join(".");
  let c = cookieName + "=" + cookieValue + ";" + expires + ";domain=." + baseDomain + ";path=/"+";secure";
  document.cookie = c;
}

function insyncGetCookie(cookieName) {
  let name = cookieName + "=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for(let i = 0; i <ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      console.log("Got cookie");
      return c.substring(name.length, c.length);
    }
  }
  return "";
}

function insyncSetChatEnv(args){
  let insyncDomain = 'https://dbrd449anfbv4.cloudfront.net';
  let insyncAppId;
  if(args.insyncEnv == "development"){
      insyncAppId = args.insyncAppIdDev;
  }else if(args.insyncEnv == "staging"){
      insyncAppId = args.insyncAppIdStage;
  }else if(args.insyncEnv == "production"){
      insyncAppId = args.insyncAppIdProd;
  }
  if(!args.hasOwnProperty("insyncTriggerPoint")){
      args.insyncTriggerPoint = window.location.hostname.split(".").slice(window.location.hostname.split(".").length-2)[0]
  }
  if((!args.hasOwnProperty("insyncUserId")) || (args.insyncUserId == "" || typeof args.insyncUserId == "undefined")){
    if(!args.hasOwnProperty("insyncUserIdExpiryInDays") || args.insyncUserIdExpiryInDays == ""){
      args.insyncUserIdExpiryInDays = 3;
    }
    args.insyncUserId = insyncGetUniqueUserId(args.insyncMarket, args.insyncEnv, args.insyncUserIdExpiryInDays);
  }

  let insyncSource = "web";
  if(args.hasOwnProperty("insyncSource")){
    insyncSource = args.insyncSource;
}
  
   ////////////// CHATBOT CONFIG //////////////

  let insyncChatbotConfig = {
      userId: args.insyncUserId,
      mobile: false,
      market: args.insyncMarket,
      env: args.insyncEnv,
      appId: insyncAppId,
      source: insyncSource,
      triggerPoint: args.insyncTriggerPoint,
      hostedPageRef: args.insyncHostedPageRef,
      trackingEvents: args.insyncTrackingEvents,
      contextParams: {
          isIframe: true,
          iframeParentWidth: window.innerWidth,
          iframeParentHeight: window.innerHeight,
          customCssSrc: args.insyncCustomCssSrc
      }
  }

   //////////////////////////////////////////
  
  // Merging modifiedClientStyleGuide
  if(insyncChatbotConfig.env == "development"){
    insyncChatbotConfig = {...insyncChatbotConfig, modifiedClientStyleGuide: args.insyncModifiedStyle};
  }

  // Merging insyncContextParams
  if(args.hasOwnProperty("insyncContextParams")){
    insyncChatbotConfig.contextParams = {...insyncChatbotConfig.contextParams, ...args.insyncContextParams};
  }

  // Trigger auto open if insyncAutoOpenTimerInSecs is configured or chatAutoOpenTime is being passed in the URL
  var insyncAutoOpenTimerVar;
  let insyncAutoOpen = function(){
    let insyncAutoOpenTimerInSecs;
    
    // Configured insyncAutoOpenTimerInSecs on page
    if(args.hasOwnProperty("insyncAutoOpenTimerInSecs")){
      insyncAutoOpenTimerInSecs = args.insyncAutoOpenTimerInSecs;
    }

    // Configured chatAutoOpenTime on page URL
    if(args.hasOwnProperty("insyncHostedPageRef") && args.insyncHostedPageRef.includes("chatAutoOpenTime=")){
      let chatAutoOpenTimeStr = "chatAutoOpenTime=";
      insyncAutoOpenTimerInSecs = (parseInt(args.insyncHostedPageRef.split(chatAutoOpenTimeStr)[1].split("&")[0]) > 0 ? parseInt(args.insyncHostedPageRef.split(chatAutoOpenTimeStr)[1].split("&")[0]) : null);
    }

    if(insyncAutoOpenTimerInSecs){
      insyncAutoOpenTimerVar = setTimeout(function() {
        insyncOpenChat('OpenChat', 'timer', args)
      }, insyncAutoOpenTimerInSecs*1000);
    }
  }
  // Tracking Events Wrapper
  let trackingEventsWrapper = function(eventName, data=null){
    if(typeof ((insyncChatbotConfig.trackingEvents || {}).events) != "undefined"){
      fireTrackingEvents(insyncChatbotConfig.trackingEvents, eventName, data);
    }
  }

  // Tracking events
  let fireTrackingEvents = function(insyncTrackingEvents, eventName, data){
    let events = insyncTrackingEvents.events;
    if(events.hasOwnProperty(eventName)){
      if(insyncTrackingEvents.target == "GoogleDataLayer"){
        let d = {event: events[eventName].eventName};
        if(events[eventName].hasOwnProperty("dataKey"))d[events[eventName].dataKey] = data;
        console.log("Push ", d);
        if(window.hasOwnProperty("dataLayer")){
          window.dataLayer.push(d);
        }else{
          console.warn("window.hasOwnProperty(dataLayer) is false");
        }
      }
    }
  }

  // Get iFrame element
  let insyncIframeEl = document.getElementById(args.insyncIframeId);

  // Triggered on the click of chat icon
  let insyncOpenChat = function(type, triggeredBy="user", args={}) {
    // Fire custom events (like GTM, etc) if expected
    trackingEventsWrapper("ChatIconClicked");

    if(typeof insyncAutoOpenTimerVar != "undefined")clearTimeout(insyncAutoOpenTimerVar); //remove setTimout if assigned
    if(insyncChatbotConfig.hasOwnProperty("styleGuide")){
      insyncIframeEl.style.height = insyncChatbotConfig.styleGuide.screenHeight.toString()+"px";
      insyncIframeEl.style.width = insyncChatbotConfig.styleGuide.screenWidth.toString()+"px";
      insyncIframeEl.style.right = insyncChatbotConfig.styleGuide.right.toString()+"px";
      insyncIframeEl.style.bottom = insyncChatbotConfig.styleGuide.bottom.toString()+"px";
      
      // Make sure you are sending a string, and to stringify JSON
      let dict = {type: type, userId: insyncChatbotConfig.userId, triggeredBy: triggeredBy};
      insyncIframeEl.contentWindow.postMessage(dict, insyncDomain);

      // Fire custom events (like GTM, etc) if expected
      trackingEventsWrapper("OpenChat");
      
    }
  };

  //Send Session data
  let insyncSendSessionData = function(data) {
    // Make sure you are sending a string, and to stringify JSON
    let dict = {type: "SendSessionData", sessionData: JSON.stringify(data)};
    insyncIframeEl.contentWindow.postMessage(dict, insyncDomain);
  
  };

  // Function Assignment
  insyncSetChatEnv.openChat = insyncOpenChat;
  insyncSetChatEnv.sendSessionData = insyncSendSessionData;

  ////////////// Receive Messages from iFrame //////////////
  window.addEventListener("message", insyncReceiveMessage, false);

  function insyncReceiveMessage(event) {
    //console.log("event.origin: "+event.origin)
    //Validating domain
    if (event.origin !== insyncDomain)
      return;
    
    // Event fired on the click of SDK's minimize icon to minimize iframe window
    if(event.data.type =='CloseChat'){
        insyncIframeEl.style.height = "0px";
        insyncIframeEl.style.width = "0px";
        insyncIframeEl.style.borderRadius = "0px";
        insyncIframeEl.style.boxShadow = "none";

        // Fire custom events (like GTM, etc) if expected
        trackingEventsWrapper("CloseChat");
    }

    // Event fired to display the chat icon as SDK is ready 
    if(event.data.type =='ShowChatBtn' && args.hasOwnProperty('insyncChatIconId')){
        let button = document.getElementById(args.insyncChatIconId);
        if(typeof insyncChatbotConfig.styleGuide == 'undefined')insyncChatbotConfig.styleGuide = {};
        insyncChatbotConfig.styleGuide = event.data;
        if(button){
          button.style.display = "block";
        }else{
          console.warn("Element with insyncChatIconId is missing!");
        }
        insyncAutoOpen();
    }

    // Event fired to match the style of iFrame window with SDK 
    if(event.data.type == "StyleIframe"){
        insyncIframeEl.style.borderRadius = insyncChatbotConfig.styleGuide.chatBoxBorderRadius.toString()+"px";
        insyncIframeEl.style.boxShadow = insyncChatbotConfig.styleGuide.chatBoxShadow;
    }

    // Event fired when a URL is clicked to be opened outside
    if(event.data.type == "OpenUrl"){
        window.open(event.data.url);
    }

    // Event fired when a email typed by the user
    if(event.data.type == "UserEmailCaptured"){
      trackingEventsWrapper(event.data.type, event.data.trackingEventData);
    }
    
    // Event fired when iFrame's content is ready
    if(event.data.type == "IframeContentReady"){
        // Send ChatbotConfig to load SDK
        let dict = {type: "ChatbotConfig", chatbotConfig: insyncChatbotConfig};
        insyncIframeEl.contentWindow.postMessage(dict, insyncDomain);
    }
  }
}
